// const vaiyotokenaddress = "0xBA19f24dFCf7f795D90c0404d104680dB28BAC2b"; //main
// const vaiyotokenaddress = "0x028C98fB13F551FaF5EfF0Dec5c80B98CFf706A5"; //test
// const lockvaiyoaddress = "0x428E68a2a7309224919914812c41Fa1048Abf2f6";//test
const vaiyotokenaddress = "0xBA19f24dFCf7f795D90c0404d104680dB28BAC2b"; //main
const lockvaiyoaddress = "0xE2E0C69A21a0d8550ca3FE8D6575c14B0c14D284"; //main
const busdAddress = "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56";

const LockContractABI = [
  { inputs: [], stateMutability: "nonpayable", type: "constructor" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Recovered",
    type: "event",
  },
  {
    inputs: [{ internalType: "address", name: "add", type: "address" }],
    name: "checkTime",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositBNB",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "amnt", type: "uint256" }],
    name: "depositBUSD",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "depositsBNB",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "depositsBUSD",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "deposittimes",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "bnbAmount", type: "uint256" }],
    name: "getBUSDAmount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBUSDPerBNB",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "busdAmount", type: "uint256" }],
    name: "getTokensAmount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minDepositAmount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "add", type: "address" }],
    name: "read",
    outputs: [
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "bool", name: "", type: "bool" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "tokenAddress", type: "address" },
      { internalType: "uint256", name: "tokenAmount", type: "uint256" },
    ],
    name: "recoverBEP20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "tokenAmount", type: "uint256" }],
    name: "recoverBUSD",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "amount", type: "uint256" }],
    name: "releaseFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "releaseFundsAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      { internalType: "contract VaiyoToken", name: "", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBNB",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBUSD",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totallockTime",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const BusdContractABI = [
  {
    inputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "from", type: "address" },
      { indexed: true, internalType: "address", name: "to", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    constant: true,
    inputs: [],
    name: "_decimals",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "_name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "_symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      { internalType: "address", name: "owner", type: "address" },
      { internalType: "address", name: "spender", type: "address" },
    ],
    name: "allowance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ internalType: "address", name: "account", type: "address" }],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ internalType: "uint256", name: "amount", type: "uint256" }],
    name: "burn",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "decimals",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "subtractedValue", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "addedValue", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ internalType: "uint256", name: "amount", type: "uint256" }],
    name: "mint",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "recipient", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "sender", type: "address" },
      { internalType: "address", name: "recipient", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

// const web3 = new Web3(
//   new Web3.providers.HttpProvider()
//   //"https://mainnet.infura.io/v3/515bc6d0df73416e938446fd12ae9234"
//   //"https://bsc-dataseed.binance.org"
// );

const web3 = new Web3(window.ethereum);
async function setProvider() {
  const _waddress = getCurrentAddress();
  const _wtype = getCurrentWalletType();
  if(_wtype == "binance") {
    await web3.setProvider(window.BinanceChain);
  } else {
    await web3.setProvider(window.ethereum);
  }
}
async function changeNetwork() {
  const _waddress = getCurrentAddress();
  const _wtype = getCurrentWalletType();
  const crypto = document.getElementById("crypto-name").innerHTML;
  if(_wtype == "binance") {
    if (typeof window.BinanceChain !== "undefined") { 
      if(window.BinanceChain.chainId != 0x38) {
        return BinanceChain.switchNetwork("bsc-mainnet")
        .then((e) => {
          getBalance(_waddress, crypto)
          .then((balance) => {
            document.getElementById("balance").innerHTML = "Balance: " + balance;
          })
          .catch(console.log);
        })
        .catch((e) => {
          console.log(e);
        });
      }   
    }
  } else /*if (_wtype == "metamask")*/ {
    if (typeof window.ethereum !== "undefined") { 
      if(window.ethereum.chainId != 0x38) {
        return window.ethereum.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: "0x38" }]
        })
        .then((e) => {
          getBalance(_waddress, crypto)
          .then((balance) => {
            document.getElementById("balance").innerHTML = "Balance: " + balance;
          })
          .catch(console.log);
        })
        .catch((e) => {
          console.log(e);
        });
      }   
    }
  }
}
function getCurrentAddress() {
  return $("#mycontainer").data("waddress");
}
function getCurrentWalletType() {
  return $("#mycontainer").data("wtype");
}
async function connectNetwork() {
  const _waddress = getCurrentAddress();
  const _wtype = getCurrentWalletType();
  if(_wtype == "binance") {
    await connectWithWallet("binance", "");
    await changeNetwork();
  } else /*if (_wtype == "metamask")*/ {
    await connectWithWallet("metamask", "");
    await changeNetwork();
  }
  await setProvider();
}
async function displayBalance(crypto) {  
  const _waddress = getCurrentAddress();
  const _wtype = getCurrentWalletType();
  getBalance(_waddress, crypto).then((e) => {
    document.getElementById("balance").innerHTML = "Balance: " + e;
  });
}
async function getBalance(account, crypto) {
  const _waddress = getCurrentAddress();
  const _wtype = getCurrentWalletType();
  var balance = 0;
  //const web3 = getWeb3();
  if (web3 !== "undefined") {
    if(crypto == "BNB") {
      await web3.eth.getBalance(account, function (err, result) {
        if (err) {
          console.log(err);
        } else {
          balance = web3.utils.fromWei(result, "ether");
        }
      });
    } else if(crypto == "BUSD") {      
      const BusdContract = new web3.eth.Contract(BusdContractABI, busdAddress);
      const bal = await BusdContract.methods.balanceOf(_waddress).call();
      balance = web3.utils.fromWei(bal, "ether");
    }
  }
  return balance;
};

function onCryptoMenuClick(cryptotype) {
  switch (cryptotype) {
    case "bnb":
      document.getElementById("crypto-icon").src =
        "<%= asset_path('bnb.png')%>";
      document.getElementById("crypto-name").innerHTML = "BNB";
      setSupplyBtnStatus("bnb");
      displayBalance("BNB");
      break;
    case "busd":
      document.getElementById("crypto-icon").src =
        "<%= asset_path('busd.png')%>";
      document.getElementById("crypto-name").innerHTML = "BUSD";
      setSupplyBtnStatus("busd");
      displayBalance("BUSD");
      break;
    default:
    // code block
  }
  $("#crypto-dropdown-menu").collapse("toggle");
  document.getElementById("amountinput").value = "";
}

async function onbtnMax() {
  await connectNetwork();
  const _waddress = getCurrentAddress();
  const _wtype = getCurrentWalletType();
  const crypto = document.getElementById("crypto-name").innerHTML;
  if (crypto == "BNB") {
    const balance = await getBalance(_waddress, "BNB");
    if (balance - 0.01 > 0)
      document.getElementById("amountinput").value = balance - 0.01;
    else document.getElementById("amountinput").value = 0;
  } else {
    //const web3 = getWeb3();
    const BusdContract = new web3.eth.Contract(BusdContractABI, busdAddress);
    const balance = await BusdContract.methods.balanceOf(_waddress).call();
    const ret = web3.utils.fromWei(balance, "ether");
    document.getElementById("amountinput").value = ret;
  }
}

async function setSupplyBtnStatus(crypto) {
  document.getElementById("supplybtn").innerHTML = "Supply";
  await connectNetwork();
  if (crypto == "busd") {
    const _waddress = getCurrentAddress();
    const _wtype = getCurrentWalletType();
    //const web3 = getWeb3();
    const BusdContract = new web3.eth.Contract(BusdContractABI, busdAddress);
    const allowanceStr = await BusdContract.methods
      .allowance(_waddress, lockvaiyoaddress)
      .call();
    const balanceStr = await BusdContract.methods
      .balanceOf(_waddress)
      .call();
    const allowance = new BigNumber(allowanceStr);
    const balance = new BigNumber(balanceStr);

    if (allowance < balance) {
      document.getElementById("supplybtn").innerHTML = "Approve";
    }
  }
}

async function approveBUSD() {
  const _waddress = getCurrentAddress();
  const _wtype = getCurrentWalletType();
  //const web3 = getWeb3();
  const BusdContract = new web3.eth.Contract(BusdContractABI, busdAddress);
  const balance = await BusdContract.methods.balanceOf(_waddress).call();
  document.getElementById("supplybtn").disabled = true;
  await BusdContract.methods
    .approve(lockvaiyoaddress, balance)
    .send({ from: _waddress })
    .then((data) => {
      document.getElementById("supplybtn").innerHTML = "Supply";
      document.getElementById("supplybtn").disabled = false;
    })
    .catch((e) => {
      console.log(e);
      document.getElementById("supplybtn").disabled = false;
    });
}

async function deposit() {
  await connectNetwork();
  const approvestate = document.getElementById("supplybtn").innerHTML;
  if (approvestate == "Approve") {
    approveBUSD();
    return;
  }
  const _waddress = getCurrentAddress();
  const _wtype = getCurrentWalletType();
  let depositAmount = document.getElementById("amountinput").value;
  if (depositAmount == "") depositAmount = "0";
  if (depositAmount == null) return;
  const amount = new BigNumber(depositAmount + "e18");
  const crypto = document.getElementById("crypto-name").innerHTML;
  //const web3 = getWeb3();
  if (crypto == "BNB") {
    const LockContract = new web3.eth.Contract(
      LockContractABI,
      lockvaiyoaddress
    );
    document.getElementById("supplybtn").disabled = true;
    LockContract.methods
      .depositBNB()
      .send({
        from: _waddress,
        value: amount, // in WEI, which is equivalent to 1 ether
      })
      .then((data) => {
        console.log(data);
        document.getElementById("supplybtn").disabled = false;
      })
      .catch((error) => {
        console.log("Error:", error);
        document.getElementById("supplybtn").disabled = false;
      });
  } else {
    const LockContract = new web3.eth.Contract(
      LockContractABI,
      lockvaiyoaddress
    );
    document.getElementById("supplybtn").disabled = true;
    LockContract.methods
      .depositBUSD(amount.toString())
      .send({ from: _waddress })
      .then((data) => {
        console.log(data);
        document.getElementById("supplybtn").disabled = false;
      })
      .catch((error) => {
        console.log("Error:", error);
        document.getElementById("supplybtn").disabled = false;
      });
  }
}
